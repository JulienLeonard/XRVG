# Rakefile
require "rake/testtask"
require "rake/clean"
require "rake/rdoctask"
#---
# The name of your project
PROJECT = "XRVG"

# Your name, used in packaging.
MY_NAME = "Julien Leonard"

# Your email address, used in packaging.
MY_EMAIL = "jl.julien.leonard@nospam@gmail.com"

# Short summary of your project, used in packaging.
PROJECT_SUMMARY = "Ruby vector graphics library"

# The project's package name (as opposed to its display name). Used for
# RubyForge connectivity and packaging.
UNIX_NAME = "xrvg"

# Your RubyForge user name.
RUBYFORGE_USER = ENV["RUBYFORGE_USER"] || "jblondinet"

# Directory on RubyForge where your website's files should be uploaded.
WEBSITE_DIR = "www"

# Output directory for the rdoc html files.
# If you don't have a custom homepage, and want to use the RDoc
# index.html as homepage, just set it to WEBSITE_DIR.
RDOC_HTML_DIR = "#{WEBSITE_DIR}/rdoc"
#---
# Variable settings for extension support.
EXT_DIR = "ext"
HAVE_EXT = File.directory?(EXT_DIR)
EXTCONF_FILES = FileList["#{EXT_DIR}/**/extconf.rb"]
EXT_SOURCES = FileList["#{EXT_DIR}/**/*.{c,h}"]
# Eventually add other files from EXT_DIR, like "MANIFEST"
EXT_DIST_FILES = EXT_SOURCES + EXTCONF_FILES
#---
REQUIRE_PATHS = ["lib"]
REQUIRE_PATHS << EXT_DIR if HAVE_EXT
$LOAD_PATH.concat(REQUIRE_PATHS)
# This library file defines the RAKEVERSION constant.
require "#{UNIX_NAME}"
PROJECT_VERSION = eval("\"#{XRVG_VERSION}\"") # e.g. "1.0.2"
#---
# Clobber object files and Makefiles generated by extconf.rb.
CLOBBER.include("#{EXT_DIR}/**/*.{so,dll,o}", "#{EXT_DIR}/**/Makefile")
# Clobber .config generated by setup.rb.
CLOBBER.include(".config")

CLEAN.include("test/**/*.svg", "*.svg")
#---
# Options common to RDocTask AND Gem::Specification.
#   The --main argument specifies which file appears on the index.html page
GENERAL_RDOC_OPTS = {
  "--title" => "#{PROJECT} API documentation",
  "--main" => "README"
}

# Additional RDoc formatted files, besides the Ruby source files.
RDOC_FILES = FileList["README"]
# Remove the following line if you don't want to extract RDoc from
# the extension C sources.
# RDOC_FILES.include(EXT_SOURCES)

# Ruby library code.
LIB_FILES = FileList["lib/*.rb"]

# Filelist with Test::Unit test cases.
TEST_FILES = FileList["test/test_*.rb"]

# Executable scripts, all non-garbage files under bin/.
BIN_FILES = FileList["bin/*"]

# This filelist is used to create source packages.
# Include all Ruby and RDoc files.
DIST_FILES = FileList["./lib/*.rb", "./lib/*.rdoc", "./examples/*.rb"]
DIST_FILES.include("Rakefile", "LICENSE")
DIST_FILES.include(BIN_FILES)
# DIST_FILES.include("data/**/*", "test/data/**/*")
# DIST_FILES.include("#{WEBSITE_DIR}/**/*.{html,css}", "man/*.[0-9]")
# Don't package files which are autogenerated by RDocTask
DIST_FILES.exclude(/^(\.\/)?#{RDOC_HTML_DIR}(\/|$)/)
# Include extension source files.
DIST_FILES.include(EXT_DIST_FILES)
# Don't package temporary files, perhaps created by tests.
DIST_FILES.exclude("**/temp_*", "**/*.tmp", "**/*.svg" )
# Don't get into recursion...
DIST_FILES.exclude(/^(\.\/)?pkg(\/|$)/)
#---
# Run the tests if rake is invoked without arguments.
task "default" => ["test"]

test_task_name = HAVE_EXT ? "run-tests" : "test"
Rake::TestTask.new(test_task_name) do |t|
  t.test_files = TEST_FILES
  t.libs = REQUIRE_PATHS
end
#---
# Set an environment variable with any configuration options you want to
# be passed through to "setup.rb config".
CONFIG_OPTS = ENV["CONFIG"]
if HAVE_EXT
  file_create ".config" do
    ruby "setup.rb config #{CONFIG_OPTS}"
  end
  
  desc "Configure and make extension. " +
    "The CONFIG variable is passed to `setup.rb config'"
  task "make-ext" => ".config" do
    # The -q option suppresses messages from setup.rb.
    ruby "setup.rb -q setup"
  end
  
  desc "Run tests after making the extension."
  task "test" do
    Rake::Task["make-ext"].invoke
    Rake::Task["run-tests"].invoke
  end
end
#---
# The "rdoc" task generates API documentation.
Rake::RDocTask.new("rdoc") do |t|
  t.rdoc_files = RDOC_FILES + LIB_FILES
  t.title = GENERAL_RDOC_OPTS["--title"]
  t.main = GENERAL_RDOC_OPTS["--main"]
  t.rdoc_dir = RDOC_HTML_DIR
end


#---
# The "prepare-release" task makes sure your tests run, and then generates
# files for a new release.
desc "Run tests, generate RDoc and create packages."
task "prepare-release" => ["clobber"] do
  puts "Preparing release of #{PROJECT} version #{XRVG_VERSION}"
  Rake::Task["test"].invoke
  Rake::Task["rdoc"].invoke
  Rake::Task["package"].invoke
end

#---
# $ rake -T
# rake clean            # Remove any temporary products.
# rake clobber          # Remove any generated file.
# rake clobber_package  # Remove package products
# rake clobber_rdoc     # Remove rdoc products
# rake package          # Build all the packages
# rake prepare-release  # Run tests, generate RDoc and create packages.
# rake publish          # Publish new release of MyProject
# rake publish-website  # Upload website to RubyForge. scp will prompt for your RubyForge password.
# rake rdoc             # Build the rdoc HTML Files
# rake repackage        # Force a rebuild of the package files
# rake rerdoc           # Force a rebuild of the RDOC files
# rake test             # Run tests for test
#---
